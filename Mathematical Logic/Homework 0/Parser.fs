// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"

    open LogicalExpression

# 10 "C:\Users\Buraindo\RiderProjects\MathLogHW0\MathLogHW0\Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | OPEN
  | CLOSE
  | AND
  | OR
  | TO
  | NOT
  | VAR of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_OPEN
    | TOKEN_CLOSE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_TO
    | TOKEN_NOT
    | TOKEN_VAR
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | OPEN  -> 1 
  | CLOSE  -> 2 
  | AND  -> 3 
  | OR  -> 4 
  | TO  -> 5 
  | NOT  -> 6 
  | VAR _ -> 7 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_OPEN 
  | 2 -> TOKEN_CLOSE 
  | 3 -> TOKEN_AND 
  | 4 -> TOKEN_OR 
  | 5 -> TOKEN_TO 
  | 6 -> TOKEN_NOT 
  | 7 -> TOKEN_VAR 
  | 10 -> TOKEN_end_of_input
  | 8 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_expression 
    | 6 -> NONTERM_expression 
    | 7 -> NONTERM_expression 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 10 
let _fsyacc_tagOfErrorTerminal = 8

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | OPEN  -> "OPEN" 
  | CLOSE  -> "CLOSE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | TO  -> "TO" 
  | NOT  -> "NOT" 
  | VAR _ -> "VAR" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | OPEN  -> (null : System.Object) 
  | CLOSE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 6us; 65535us; 0us; 2us; 5us; 6us; 8us; 9us; 13us; 10us; 14us; 11us; 15us; 12us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 4us; 1us; 5us; 6us; 7us; 1us; 1us; 1us; 2us; 1us; 3us; 4us; 3us; 5us; 6us; 7us; 1us; 3us; 1us; 4us; 4us; 4us; 5us; 6us; 7us; 4us; 5us; 5us; 6us; 7us; 4us; 5us; 6us; 6us; 7us; 4us; 5us; 6us; 7us; 7us; 1us; 5us; 1us; 6us; 1us; 7us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 9us; 11us; 13us; 15us; 20us; 22us; 24us; 29us; 34us; 39us; 44us; 46us; 48us; |]
let _fsyacc_action_rows = 16
let _fsyacc_actionTableElements = [|3us; 32768us; 1us; 5us; 6us; 8us; 7us; 4us; 0us; 49152us; 4us; 32768us; 0us; 3us; 3us; 14us; 4us; 15us; 5us; 13us; 0us; 16385us; 0us; 16386us; 3us; 32768us; 1us; 5us; 6us; 8us; 7us; 4us; 4us; 32768us; 2us; 7us; 3us; 14us; 4us; 15us; 5us; 13us; 0us; 16387us; 3us; 32768us; 1us; 5us; 6us; 8us; 7us; 4us; 0us; 16388us; 3us; 16389us; 3us; 14us; 4us; 15us; 5us; 13us; 0us; 16390us; 1us; 16391us; 3us; 14us; 3us; 32768us; 1us; 5us; 6us; 8us; 7us; 4us; 3us; 32768us; 1us; 5us; 6us; 8us; 7us; 4us; 3us; 32768us; 1us; 5us; 6us; 8us; 7us; 4us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 10us; 11us; 12us; 16us; 21us; 22us; 26us; 27us; 31us; 32us; 34us; 38us; 42us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 2us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 116 "C:\Users\Buraindo\RiderProjects\MathLogHW0\MathLogHW0\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LogicalExpression.expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 125 "C:\Users\Buraindo\RiderProjects\MathLogHW0\MathLogHW0\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                                                                   _1 
                   )
# 19 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                 : LogicalExpression.expression));
# 136 "C:\Users\Buraindo\RiderProjects\MathLogHW0\MathLogHW0\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                                                                   Variable (_1) 
                   )
# 21 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                 : 'expression));
# 147 "C:\Users\Buraindo\RiderProjects\MathLogHW0\MathLogHW0\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                                                                   _2 
                   )
# 22 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                 : 'expression));
# 158 "C:\Users\Buraindo\RiderProjects\MathLogHW0\MathLogHW0\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                                                                   Not (_2) 
                   )
# 23 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                 : 'expression));
# 169 "C:\Users\Buraindo\RiderProjects\MathLogHW0\MathLogHW0\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                                                                   BinaryOperator (To, _1, _3) 
                   )
# 24 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                 : 'expression));
# 181 "C:\Users\Buraindo\RiderProjects\MathLogHW0\MathLogHW0\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                                                                   BinaryOperator (And, _1, _3) 
                   )
# 25 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                 : 'expression));
# 193 "C:\Users\Buraindo\RiderProjects\MathLogHW0\MathLogHW0\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                                                                   BinaryOperator (Or, _1, _3) 
                   )
# 26 "C:/Users/Buraindo/RiderProjects/MathLogHW0/MathLogHW0/Parser.fsy"
                 : 'expression));
|]
# 206 "C:\Users\Buraindo\RiderProjects\MathLogHW0\MathLogHW0\Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 11;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : LogicalExpression.expression =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))

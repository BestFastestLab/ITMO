{"remainingRequest":"D:\\university trash\\wp9\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\university trash\\wp9\\frontend\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\university trash\\wp9\\frontend\\src\\App.vue","mtime":1545516359117},{"path":"D:\\university trash\\wp9\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\university trash\\wp9\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\university trash\\wp9\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\university trash\\wp9\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\nimport Header from './components/Header'\nimport Middle from './components/Middle'\nimport Footer from './components/Footer'\n\naxios.defaults.baseURL = '/api/1/';\n\nexport default {\n    name: 'app',\n    data: function () {\n        return this.$root.$data;\n    },\n    components: {\n        Header,\n        Middle,\n        Footer\n    }, beforeCreate() {\n        this.$root.$on(\"onLogout\", () => {\n            localStorage.removeItem(\"token\");\n            this.user = null;\n            axios.defaults.headers = {};\n        });\n        this.$root.$on(\"onEnter\", (token) => {\n            localStorage.setItem(\"token\", token);\n            axios.defaults.headers = {\n                Authorization: \"Bearer \" + token\n            };\n            axios.get(\"users/authenticated\").then(response => {\n                this.user = response.data;\n                this.userId = this.user.id;\n                this.$root.$emit(\"onEnterSuccess\");\n            });\n        });\n        this.$root.$on(\"onRegister\", (login, name, password) => {\n            axios.post('users', {\n                login: login, name: name, password: password,\n            }).then(response => {\n                if (response.data['success']) {\n                    this.$root.$emit(\"onRegisterSuccess\");\n                } else {\n                    this.$root.$emit(\"onRegistrationError\", response.data['error'].join(\"\\r\\n\"));\n                }\n            });\n        });\n        this.$root.$on(\"onAddPost\", (title, text) => {\n            if (this.userId) {\n                axios.post('posts', {\n                    title: title, text: text, userId: this.userId,\n                }).then(response => {\n                    if (response.data['success']) {\n                        this.$root.$emit(\"onAddPostSuccess\");\n                    } else {\n                        this.$root.$emit(\"onAddPostValidationError\", response.data['error'].join(\"\\r\\n\"));\n                    }\n                });\n            } else {\n                this.$root.$emit(\"onAddPostValidationError\", \"No access\");\n            }\n        });\n        this.$root.$on(\"onEditPost\", (id, title, text) => {\n            if (this.userId) {\n                if (!id) {\n                    this.$root.$emit(\"onEditPostValidationError\", \"ID is invalid\");\n                } else if (!text) {\n                    this.$root.$emit(\"onEditPostValidationError\", \"Text is invalid\");\n                } else {\n                    axios.post('edit', {\n                        id: id, title: title, text: text,\n                    }).then(response => {\n                        if (response.data['success']) {\n                            this.$root.$emit(\"onEditPostSuccess\");\n                        } else {\n                            this.$root.$emit(\"onEditPostValidationError\", response.data['error'].join(\"\\r\\n\"));\n                        }\n                    });\n                }\n            } else {\n                this.$root.$emit(\"onEditPostValidationError\", \"No access\");\n            }\n        });\n    }, beforeMount() {\n        if (localStorage.getItem(\"token\") && !this.user) {\n            this.$root.$emit(\"onEnter\", localStorage.getItem(\"token\"));\n        }\n    },\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <!--suppress HtmlUnknownTag -->\n    <body id=\"app\">\n    <Header :user=\"user\"/>\n    <Middle/>\n    <Footer/>\n    </body>\n</template>\n\n<script>\n    import axios from 'axios';\n    import Header from './components/Header'\n    import Middle from './components/Middle'\n    import Footer from './components/Footer'\n\n    axios.defaults.baseURL = '/api/1/';\n\n    export default {\n        name: 'app',\n        data: function () {\n            return this.$root.$data;\n        },\n        components: {\n            Header,\n            Middle,\n            Footer\n        }, beforeCreate() {\n            this.$root.$on(\"onLogout\", () => {\n                localStorage.removeItem(\"token\");\n                this.user = null;\n                axios.defaults.headers = {};\n            });\n            this.$root.$on(\"onEnter\", (token) => {\n                localStorage.setItem(\"token\", token);\n                axios.defaults.headers = {\n                    Authorization: \"Bearer \" + token\n                };\n                axios.get(\"users/authenticated\").then(response => {\n                    this.user = response.data;\n                    this.userId = this.user.id;\n                    this.$root.$emit(\"onEnterSuccess\");\n                });\n            });\n            this.$root.$on(\"onRegister\", (login, name, password) => {\n                axios.post('users', {\n                    login: login, name: name, password: password,\n                }).then(response => {\n                    if (response.data['success']) {\n                        this.$root.$emit(\"onRegisterSuccess\");\n                    } else {\n                        this.$root.$emit(\"onRegistrationError\", response.data['error'].join(\"\\r\\n\"));\n                    }\n                });\n            });\n            this.$root.$on(\"onAddPost\", (title, text) => {\n                if (this.userId) {\n                    axios.post('posts', {\n                        title: title, text: text, userId: this.userId,\n                    }).then(response => {\n                        if (response.data['success']) {\n                            this.$root.$emit(\"onAddPostSuccess\");\n                        } else {\n                            this.$root.$emit(\"onAddPostValidationError\", response.data['error'].join(\"\\r\\n\"));\n                        }\n                    });\n                } else {\n                    this.$root.$emit(\"onAddPostValidationError\", \"No access\");\n                }\n            });\n            this.$root.$on(\"onEditPost\", (id, title, text) => {\n                if (this.userId) {\n                    if (!id) {\n                        this.$root.$emit(\"onEditPostValidationError\", \"ID is invalid\");\n                    } else if (!text) {\n                        this.$root.$emit(\"onEditPostValidationError\", \"Text is invalid\");\n                    } else {\n                        axios.post('edit', {\n                            id: id, title: title, text: text,\n                        }).then(response => {\n                            if (response.data['success']) {\n                                this.$root.$emit(\"onEditPostSuccess\");\n                            } else {\n                                this.$root.$emit(\"onEditPostValidationError\", response.data['error'].join(\"\\r\\n\"));\n                            }\n                        });\n                    }\n                } else {\n                    this.$root.$emit(\"onEditPostValidationError\", \"No access\");\n                }\n            });\n        }, beforeMount() {\n            if (localStorage.getItem(\"token\") && !this.user) {\n                this.$root.$emit(\"onEnter\", localStorage.getItem(\"token\"));\n            }\n        },\n    }\n</script>\n\n<style>\n</style>\n"]}]}